[
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "Sample size estimation",
    "section": "Overview",
    "text": "Overview\nThe aim of this analysis is to estimate the sample size for a study on the effects of sleep disruption and sleep duration on labor duration (the pregnancy project), with the goal of replicating the findings of Lee & Gay (2004)."
  },
  {
    "objectID": "index.html#effect-size-estimation-cohens-f",
    "href": "index.html#effect-size-estimation-cohens-f",
    "title": "Sample size estimation",
    "section": "Effect size estimation (Cohen’s f)",
    "text": "Effect size estimation (Cohen’s f)\nSee Cohen (1988) and Maxwell et al. (2018) to learn more.\n\nCodelibrary(checkmate)\nlibrary(cli)\nlibrary(dplyr)\nlibrary(stats)\nlibrary(pwr)\n\n\n\nCode# See Maxwell et al. (2018, p. 150)\nf_unb &lt;- function(k, n_total, f_test) {\n  checkmate::assert_int(k, lower = 2)\n  checkmate::assert_int(n_total, lower = 2)\n  checkmate::assert_number(f_test)\n  \n  ((k - 1) / n_total) %&gt;%\n  `*`(((n_total - k - 2) / (n_total - k)) * (f_test - 1)) |&gt; \n  sqrt()\n}\n\n\nParameters\nThe parameters for the effect size were extracted from Lee & Gay (2004), as shown below.\n\nControlling for infant birth weight, ANCOVA indicated that the degree of prenatal sleep disruption [WASO] had a significant effect on labor duration (\\(\\text{F}[2,125] = 6.93\\), \\(\\text{P} = .001\\)). (Lee & Gay, 2004, p. 2044)\n\n\nControlling for infant birth weight, ANCOVA indicated that prenatal sleep quantity (TST) also had a significant effect on labor duration (\\(\\text{F}[2,125] = 5.54\\), \\(\\text{P} = .005\\)). (Lee & Gay, 2004, p. 2044)\n\n\nWASO = Wakefulness after sleep onset. TST = Total sleep time.\n\n\n\n\n\n\n\nTable 1: Differences in labor duration by total sleep time and wake after sleep onset (\\(n = 131\\))\n\n\n\n\n\\(n\\)\nLabor duration\\(^{\\ast}\\) (mean \\(\\pm\\) SD)\n\n\n\nWASO\n\n\n\n\n\\(15\\%+\\)\n\\(41\\)\n\\(26.0 \\pm 11.7^{\\dagger}\\)\n\n\n\\(10\\%-14.9\\%\\)\n\\(32\\)\n\\(16.3 \\pm 12.9\\)\n\n\n\\(&lt;10\\%\\)\n\\(58\\)\n\\(18.3 \\pm 14.6\\)\n\n\nTST\n\n\n\n\n\\(&lt;6 \\text{h}\\)\n\\(19\\)\n\\(29.0 \\pm 12.5^{\\dagger}\\)\n\n\n\\(6-6.9 \\text{h}\\)\n\\(38\\)\n\\(20.5 \\pm 11.3\\)\n\n\n\\(7+ \\text{h}\\)\n\\(74\\)\n\\(17.7 \\pm 15.6\\)\n\n\n\n\\(^{\\ast}\\)Adjusted for infant birth weight. \\(^{\\dagger}\\)Significantly longer labor than the other 2 groups.\nSource: Lee & Gay (2004, p. 2044).\n\n\n\n\n\n\n\nWASO\n\nCodek &lt;- 3\nnum_df &lt;- 2\nden_df &lt;- 125\nn_total_waso &lt;- den_df + k\nf_test &lt;- 6.93\n\nf_unb_waso &lt;- f_unb(k, n_total_waso, f_test)\n\nf_unb_waso\n#&gt; [1] 0.3019499\n\n\nTST\n\nCodek &lt;- 3\nnum_df &lt;- 2\nden_df &lt;- 125\nn_total_tst &lt;- den_df + k\nf_test &lt;- 5.54\n\nf_unb_tst &lt;- f_unb(k, n_total_tst, f_test)\n\nf_unb_tst\n#&gt; [1] 0.2642016"
  },
  {
    "objectID": "index.html#sample-size-estimation",
    "href": "index.html#sample-size-estimation",
    "title": "Sample size estimation",
    "section": "Sample size estimation",
    "text": "Sample size estimation\nParameters\n\nCodealpha &lt;- 0.05\npower &lt;- 0.8\nk &lt;- 3 # Number of groups\n\n\nUsing the pwr R package\nIt’s important to note that, according to Cohen (1988, p. 403):\n\n[…] sample size estimation in the analysis of covariance proceeds in exactly the same way as in analogous analysis of variance designs.\n\nWASO\n\nCodetest &lt;- pwr::pwr.anova.test(\n  k = k, \n  f = f_unb_waso, \n  sig.level = alpha, \n  power = power\n)\n\ntest\n#&gt; \n#&gt;      Balanced one-way analysis of variance power calculation \n#&gt; \n#&gt;               k = 3\n#&gt;               n = 36.24212\n#&gt;               f = 0.3019499\n#&gt;       sig.level = 0.05\n#&gt;           power = 0.8\n#&gt; \n#&gt; NOTE: n is number in each group\n\n\n\nCodepwr::plot.power.htest(test, type = \"b\", main = \"WASO\")\n\n\n\n\n\n\n\n\nCodeceiling(test$n * k) # Total sample size\n#&gt; [1] 109\n\n\nTST\n\nCodetest &lt;- pwr::pwr.anova.test(\n  k = k, \n  f = f_unb_tst, \n  sig.level = alpha, \n  power = power\n)\n\ntest\n#&gt; \n#&gt;      Balanced one-way analysis of variance power calculation \n#&gt; \n#&gt;               k = 3\n#&gt;               n = 47.02238\n#&gt;               f = 0.2642016\n#&gt;       sig.level = 0.05\n#&gt;           power = 0.8\n#&gt; \n#&gt; NOTE: n is number in each group\n\n\n\nCodepwr::plot.power.htest(test, type = \"b\", main = \"TST\")\n\n\n\n\n\n\n\n\nCodeceiling(test$n * k) # Total sample size\n#&gt; [1] 142\n\n\nUsing the G*Power software\nSee Faul et al. (2007) to learn more.\nWASO\n\nCodeF tests - ANCOVA: Fixed effects, main effects and interactions\nAnalysis:   A priori: Compute required sample size \nInput:  Effect size f   =   0.3019499\n    α err prob  =   0.05\n    Power (1-β err prob)    =   0.8\n    Numerator df    =   2\n    Number of groups    =   3\n    Number of covariates    =   1\nOutput: Noncentrality parameter λ   =   9.9379379\n    Critical F  =   3.0828520\n    Denominator df  =   105\n    Total sample size   =   109\n    Actual power    =   0.8009725\n\n\nTST\n\nCodeF tests - ANCOVA: Fixed effects, main effects and interactions\nAnalysis:   A priori: Compute required sample size \nInput:  Effect size f   =   0.2642016\n    α err prob  =   0.05\n    Power (1-β err prob)    =   0.8\n    Numerator df    =   2\n    Number of groups    =   3\n    Number of covariates    =   1\nOutput: Noncentrality parameter λ   =   9.9119529\n    Critical F  =   3.0617157\n    Denominator df  =   138\n    Total sample size   =   142\n    Actual power    =   0.8027593\n\n\nUsing Shieh’s method\nSee Shieh (2020) to learn more.\n\nCode#' Compute a power analysis and sample size for an ANCOVA design\n#'\n#' @description\n#'\n#' `ancova_muhtpo()` computes the __power__ and  `ancova_muhtnp()` the\n#' __sample size__ for a generalized linear hypothesis tests of treatment\n#' effects.\n#'\n#' These functions were adapted from \"Program C\" and \"Program D\" algorithms\n#' found in Shieh (2020) supplementary material.\n#'\n#' @details\n#'\n#' ## `contrast` parameter\n#'\n#' If `contrast = NULL`, `ancova_muhtnp()` will use the following contrast\n#' matrix:\n#'\n#' `cbind(matrix(rep(1, group_n - 1), group_n - 1, 1), - diag(group_n - 1))`\n#'\n#' * Example:\n#'\n#' ```{r}\n#' group_n &lt;- 3\n#'\n#' cbind(matrix(rep(1, group_n - 1), group_n - 1, 1), - diag(group_n - 1))\n#' ```\n#'\n#' Learn more about \"contrast matrices\" at\n#' \\url{https://en.wikipedia.org/wiki/Contrast_(statistics)}.\n#'\n#' @param group_n A number, greater than 1, indicating the number of groups.\n#' @param group_ssize A [numeric][numeric()] object indicating the groups sample\n#'   sizes.\n#' @param group_sratio A [numeric][numeric()] object indicating the groups\n#'   sample ratios.\n#' @param group_amean A [numeric][numeric()] object indicating the adjusted\n#'   group means.\n#' @param var A number indicating the variance.\n#' @param cov_n A number, greater than 0, indicating the number of covariates.\n#' @param alpha (optional) a number, from `0` to `1`, indicating the designated\n#'   significant level (\\eqn{\\alpha}{alpha}) (default: `0.05`).\n#' @param power (optional) a number, between 0 and 1, indicating the nominal\n#'   power (default: `0.8`).\n#' @param contrast (optional) a [matrix][matrix()] object with the contrast\n#' coefficients. See the Details section to learn more (default: `NULL`).\n#'\n#' @return A [list][list()] object with the following elements:\n#'\n#' * `group_n`: a number indicating the number of groups.\n#' * `cov_n`: a number indicating the number of covariates.\n#' * `alpha`: a number indicating the designated significant level\n#' (\\eqn{\\alpha}{alpha}) used.\n#' * `power`: a number indicating the nominal power used (only for\n#' `ancova_muhtnp()`).\n#' * `lgamsq`: a [matrix][matrix()] object indicating `?`.\n#' * `ssize_group`: a [numeric][numeric()] object indicating the sample size for\n#' each group.\n#' * `ssize_total`: a number indicating the total sample size.\n#' * `epower`: a number indicating the estimated statistical power for the\n#' sample size (\\eqn{1 - \\beta}).\n#'\n#' @references\n#' \n#' Shieh, G. (2020). Power analysis and sample size planning in ANCOVA designs.\n#' _Psychometrika_, _85_(1), 101–120. \\doi{10.1007/s11336-019-09692-3}\n#'\n#' @examples\n#' ancova_muhtpo(group_n = 3, group_ssize = c(10, 10, 10),\n#'               group_amean = c(7.5366, 11.9849, 13.9785),\n#'               var = 29.0898, cov_n = 1, alpha = 0.05, contrast = NULL)\n#'\n#' ancova_muhtnp(group_n = 3, group_sratio = c(1, 1, 1),\n#'               group_amean = c(7.5366, 11.9849, 13.9785),\n#'               var = 29.0898, cov_n = 1, alpha = 0.05, power = 0.8,\n#'               contrast = NULL)\nancova_muhtpo &lt;- function(group_n, group_ssize, group_amean, var, cov_n,\n                          alpha = 0.05, contrast = NULL) {\n  checkmate::assert_int(group_n, lower = 2)\n  checkmate::assert_numeric(group_ssize, len = group_n)\n  checkmate::assert_numeric(group_amean, len = group_n)\n  checkmate::assert_number(var)\n  checkmate::assert_int(cov_n, lower = 1)\n  checkmate::assert_number(alpha, lower = 0, upper = 1)\n  checkmate::assert_matrix(contrast, max.cols = group_n, null.ok = TRUE)\n\n  if (is.null(contrast)) {\n    contrast &lt;- cbind(matrix(rep(1, group_n - 1),\n                             group_n - 1, 1), - diag(group_n - 1))\n  }\n\n  checkmate::assert_true(all(rowSums(contrast) == 0))\n\n  numint &lt;- 2000\n  dd &lt;- 1e-5\n  coevec &lt;- c(1, rep(c(4, 2), numint / 2 - 1), 4, 1)\n  bl &lt;- dd\n  bu &lt;- 1 - dd\n  intl &lt;- (bu - bl) / numint\n  bvec &lt;- bl + intl * (0:numint)\n  cmu &lt;- contrast %*% matrix(group_amean, group_n, 1)\n  df1 &lt;- nrow(contrast)\n  ssize_total &lt;- sum(group_ssize)\n  qmat &lt;- diag(ssize_total / group_ssize)\n  lgamsq &lt;- t(cmu) %*% solve(contrast %*% qmat %*% t(contrast)) %*% cmu / var\n\n  epowerf &lt;- function() {\n    ssize_total &lt;- sum(group_ssize)\n    df2 &lt;- ssize_total - group_n - cov_n\n    dfx &lt;- df2 + 1\n    b &lt;- cov_n / dfx\n    fcrit &lt;- stats::qf(1 - alpha, df1, df2)\n\n    if (cov_n == 1) {\n      tl &lt;- stats::qt(dd, dfx)\n      tu &lt;- stats::qt(1 - dd, dfx)\n      intl &lt;- (tu - tl) / numint\n      tvec &lt;- tl + intl * (0:numint)\n      wtpdf &lt;- (intl / 3) * coevec * stats::dt(tvec, dfx)\n\n      epower &lt;- sum(wtpdf * stats::pf( # nolint\n        fcrit, df1, df2, ssize_total * c(lgamsq) / (1 + b * tvec^2),\n        lower.tail = FALSE)\n      )\n    } else {\n      wbpdf &lt;- (intl / 3) * coevec * stats::dbeta(bvec, dfx / 2,\n                                                  cov_n / 2)\n\n      epower &lt;- sum(wbpdf * stats::pf(\n        fcrit, df1, df2, ssize_total * lgamsq * bvec,\n        lower.tail = FALSE)\n      )\n    }\n  }\n\n  epower &lt;- epowerf()\n\n  list(group_n = group_n, cov_n = cov_n, alpha = alpha, lgamsq = lgamsq,\n       ssize_group = group_ssize, ssize_total = ssize_total, epower = epower)\n}\n\nancova_muhtnp &lt;- function(group_n, group_sratio, group_amean, var, cov_n,\n                          alpha = 0.05, power = 0.8, contrast = NULL) {\n  checkmate::assert_int(group_n, lower = 2)\n  checkmate::assert_numeric(group_sratio, len = group_n)\n  checkmate::assert_numeric(group_amean, len = group_n)\n  checkmate::assert_number(var)\n  checkmate::assert_int(cov_n, lower = 1)\n  checkmate::assert_number(alpha, lower = 0, upper = 1)\n  checkmate::assert_number(power, lower = 0, upper = 1)\n  checkmate::assert_matrix(contrast, max.cols = group_n, null.ok = TRUE)\n\n  if (is.null(contrast)) {\n    contrast &lt;- cbind(matrix(rep(1, group_n - 1),\n                             group_n - 1, 1), - diag(group_n - 1))\n  }\n\n  checkmate::assert_true(all(rowSums(contrast) == 0))\n\n  numint &lt;- 2000\n  dd &lt;- 1e-5\n  coevec &lt;- c(1, rep(c(4, 2), numint / 2 - 1), 4, 1)\n  bl &lt;- dd\n  bu &lt;- 1 - dd\n  intl &lt;- (bu - bl) / numint\n  bvec &lt;- bl + intl * (0:numint)\n  cmu &lt;- contrast %*% matrix(group_amean, group_n, 1)\n  df1 &lt;- nrow(contrast)\n  qmat &lt;- diag(sum(group_sratio) / group_sratio)\n  lgamsq &lt;- t(cmu) %*% solve(contrast %*% qmat %*% t(contrast)) %*%\n    cmu / var\n\n  epowerf &lt;-  function() {\n    ssize_total &lt;- sum(ssize_group)\n    df2 &lt;- ssize_total - group_n - cov_n\n    dfx &lt;- df2 + 1\n    b &lt;- cov_n / dfx\n    fcrit &lt;- stats::qf(1 - alpha, df1, df2)\n\n    if (cov_n == 1) {\n      tl &lt;- stats::qt(dd, dfx)\n      tu &lt;- stats::qt(1 - dd, dfx)\n      intl &lt;- (tu - tl) / numint\n      tvec &lt;- tl + intl * (0:numint)\n      wtpdf &lt;- (intl / 3) * coevec * stats::dt(tvec, dfx)\n      ncp &lt;- ssize_total * c(lgamsq) / (1 + b * tvec^2)\n\n      epower &lt;- sum(wtpdf * stats::pf( # nolint\n        fcrit, df1, df2, ncp, lower.tail = FALSE)\n      )\n    } else {\n      wbpdf &lt;- (intl / 3) * coevec * stats::dbeta(bvec, dfx / 2,\n                                                  cov_n / 2)\n      epower &lt;- sum(wbpdf * stats::pf(\n        fcrit, df1, df2, ssize_total * lgamsq * bvec,\n        lower.tail = FALSE)\n      )\n    }\n  }\n\n  n &lt;- 5\n  epower &lt;- 0\n\n  while (epower &lt; power && n &lt; 1000) {\n    n &lt;- n + 1\n    ssize_group &lt;- n * group_sratio\n    epower &lt;- epowerf()\n  }\n\n  ssize_group &lt; -n * group_sratio\n  ssize_total &lt;- sum(ssize_group)\n\n  list(group_n = group_n, cov_n = cov_n, alpha = alpha, power = power,\n       lgamsq = lgamsq, ssize_group = ssize_group, ssize_total = ssize_total,\n       epower = epower)\n}\n\n\nWASO\n\nCode# Group 1: 15+\nn_1_waso &lt;- 41\nmean_1_adj_waso &lt;- 26\nsd_1_waso &lt;- 11.7\n\n# Group 2: 10%-14.9%\nn_2_waso &lt;- 32\nmean_2_adj_waso &lt;- 16.3\nsd_2_waso &lt;- 12.9\n\n# Group 3: &lt;10%\nn_3_waso &lt;- 58\nmean_3_adj_waso &lt;- 18.3\nsd_3_waso &lt;- 14.6\n\ngroup_sratio &lt;- c(\n  n_1_waso / n_total_waso, \n  n_2_waso / n_total_waso, \n  n_3_waso / n_total_waso\n)\n\ngroup_amean &lt;- c(mean_1_adj_waso, mean_2_adj_waso, mean_3_adj_waso)\n\nsd_pooled &lt;- \n  (c(n_1_waso, n_2_waso, n_3_waso) - 1) %&gt;%\n  `*`(c(sd_1_waso, sd_2_waso, sd_3_waso)^2) |&gt;\n  sum() %&gt;% \n  `/`(sum((c(n_1_waso, n_2_waso, n_3_waso) - 1))) |&gt;\n  sqrt()\n\nvar_pooled &lt;- sd_pooled^2\n\nancova_muhtnp(\n  group_n = k, \n  group_sratio = group_sratio, \n  group_amean = group_amean, \n  var = var_pooled, \n  cov_n = 1, \n  alpha = alpha, \n  power = power, \n  contrast = NULL\n)\n#&gt; $group_n\n#&gt; [1] 3\n#&gt; \n#&gt; $cov_n\n#&gt; [1] 1\n#&gt; \n#&gt; $alpha\n#&gt; [1] 0.05\n#&gt; \n#&gt; $power\n#&gt; [1] 0.8\n#&gt; \n#&gt; $lgamsq\n#&gt;            [,1]\n#&gt; [1,] 0.08899738\n#&gt; \n#&gt; $ssize_group\n#&gt; [1] 35.23438 27.50000 49.84375\n#&gt; \n#&gt; $ssize_total\n#&gt; [1] 112.5781\n#&gt; \n#&gt; $epower\n#&gt; [1] 0.8008998\n\n\nTST\n\nCode# Group 1: &lt;6 h\nn_1_tst &lt;- 19\nmean_1_adj_tst &lt;- 29\nsd_1_tst &lt;- 12.5\n\n# Group 2: 6-6.9 h\nn_2_tst &lt;- 38\nmean_2_adj_tst &lt;- 20.5\nsd_2_tst &lt;- 11.3\n\n# Group 3: 7+ h\nn_3_tst &lt;- 74\nmean_3_adj_tst &lt;- 17.7\nsd_3_tst &lt;- 15.6\n\ngroup_sratio &lt;- c(\n  n_1_tst / n_total_tst, \n  n_2_tst / n_total_tst, \n  n_3_tst / n_total_tst\n)\n\ngroup_amean &lt;- c(mean_1_adj_tst, mean_2_adj_tst, mean_3_adj_tst)\n\nsd_pooled &lt;- \n  (c(n_1_tst, n_2_tst, n_3_tst) - 1) %&gt;%\n  `*`(c(sd_1_tst, sd_2_tst, sd_3_tst)^2) |&gt;\n  sum() %&gt;% \n  `/`(sum((c(n_1_tst, n_2_tst, n_3_tst) - 1))) |&gt;\n  sqrt()\n\nvar_pooled &lt;- sd_pooled^2\n\nancova_muhtnp(\n  group_n = k, \n  group_sratio = group_sratio, \n  group_amean = group_amean, \n  var = var_pooled, \n  cov_n = 1, \n  alpha = alpha, \n  power = power, \n  contrast = NULL\n)\n#&gt; $group_n\n#&gt; [1] 3\n#&gt; \n#&gt; $cov_n\n#&gt; [1] 1\n#&gt; \n#&gt; $alpha\n#&gt; [1] 0.05\n#&gt; \n#&gt; $power\n#&gt; [1] 0.8\n#&gt; \n#&gt; $lgamsq\n#&gt;            [,1]\n#&gt; [1,] 0.07479986\n#&gt; \n#&gt; $ssize_group\n#&gt; [1] 19.29688 38.59375 75.15625\n#&gt; \n#&gt; $ssize_total\n#&gt; [1] 133.0469\n#&gt; \n#&gt; $epower\n#&gt; [1] 0.8005404"
  },
  {
    "objectID": "index.html#references",
    "href": "index.html#references",
    "title": "Sample size estimation",
    "section": "References",
    "text": "References\n\n\nCohen, J. (1988). Statistical power analysis for the behavioral sciences (2nd ed.). Lawrence Erlbaum Associates.\n\n\nFaul, F., Erdfelder, E., Lang, A.-G., & Buchner, A. (2007). G*Power 3: A flexible statistical power analysis program for the social, behavioral, and biomedical sciences. Behavior Research Methods, 39(2), 175–191. https://doi.org/10.3758/BF03193146\n\n\nLee, K. A., & Gay, C. L. (2004). Sleep in late pregnancy predicts length of labor and type of delivery. American Journal of Obstetrics and Gynecology, 191(6), 2041–2046. https://doi.org/10.1016/j.ajog.2004.05.086\n\n\nMaxwell, S. E., Delaney, H. D., & Kelley, K. (2018). Designing experiments and analyzing data: A model comparison perspective (3rd ed.). Routledge.\n\n\nShieh, G. (2020). Power analysis and sample size planning in ANCOVA designs. Psychometrika, 85(1), 101–120. https://doi.org/10.1007/s11336-019-09692-3"
  }
]